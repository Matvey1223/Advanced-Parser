import telebot
from telebot import types
from crypto_pay_api_sdk import cryptopay
import sqlite3
from apscheduler.schedulers.base import BaseScheduler



bot = telebot.TeleBot(token = '6682924404:AAEtX6wYskAwc9vc9x4kkI8Wx6oOp1Z-JMc')
invoice_info = []
Crypto = cryptopay.Crypto(token='8722:AAnXwnxAfOYxMkfXSkrixl3nMrtdbXZyS1F', testnet=True)
conn = sqlite3.connect('users.db', check_same_thread=False)
cur = conn.cursor()  # db create
invoice_id = ''
invoice_p = ''
scheduler = BaseScheduler()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    global conn, cur
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ü–∞—Ä—Å–µ—Ä', callback_data = '–ü–∞—Ä—Å–µ—Ä')
    btn2 = types.InlineKeyboardButton('üé∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='üé∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
    btn3 = types.InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    btn4 = types.InlineKeyboardButton('–¢–∞—Ä–∏—Ñ—ã', callback_data='–¢–∞—Ä–∏—Ñ—ã')
    markup.row(btn1)
    markup.row(btn2, btn3)
    markup.row(btn4)

    bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤ –ø–∞—Ä—Å–∏–Ω–≥ –±–æ—Ç–∞, {message.from_user.first_name}\n–í–∞—à –±–∞–ª–∞–Ω—Å: 0',reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: True)
def callback_inline(callback):
    global invoice_info, Crypto, conn, cur, invoice_id, invoice_p
    if callback.data == 'üé∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
        bot.send_message(callback.message.chat.id, text = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø–µ—Ä–∏–æ–¥')
    if callback.data == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥')
        markup.row(btn1)
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text="–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=markup)
    if callback.data == '–ù–∞–∑–∞–¥':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–ü–∞—Ä—Å–µ—Ä', callback_data='–ü–∞—Ä—Å–µ—Ä')
        btn2 = types.InlineKeyboardButton('üé∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='üé∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
        btn3 = types.InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        btn4 = types.InlineKeyboardButton('–¢–∞—Ä–∏—Ñ—ã', callback_data='–¢–∞—Ä–∏—Ñ—ã')
        markup.row(btn1)
        markup.row(btn2, btn3)
        markup.row(btn4)
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                              text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤ –ø–∞—Ä—Å–∏–Ω–≥ –±–æ—Ç–∞, {callback.from_user.first_name}\n–í–∞—à –±–∞–ª–∞–Ω—Å: 0.0', reply_markup=markup)
    if callback.data == '–¢–∞—Ä–∏—Ñ—ã':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('1 –¥–µ–Ω—å/ 2.5$', callback_data='1 –¥–µ–Ω—å/ 2.5$')
        btn2 = types.InlineKeyboardButton('3 –¥–Ω—è/ 8$', callback_data='3 –¥–Ω—è/ 8$')
        btn3 = types.InlineKeyboardButton('–ù–µ–¥–µ–ª—è/ 18$', callback_data='–ù–µ–¥–µ–ª—è/ 18$')
        btn4 = types.InlineKeyboardButton('–ú–µ—Å—è—Ü/ 40$', callback_data='–ú–µ—Å—è—Ü/ 40$')
        btn5 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥')
        markup.row(btn1)
        markup.row(btn2)
        markup.row(btn3)
        markup.row(btn4)
        markup.row(btn5)
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text="–¢–∞—Ä–∏—Ñ—ã", reply_markup=markup)

    if callback.data in  ('BTC', 'USDT', 'TON', 'ETH', 'BNB'):
        invoice_info.append(callback.data)
        invoice = Crypto.createInvoice(asset = invoice_info[1], amount = invoice_info[0])
        bot.send_message(chat_id=callback.message.chat.id, text = f'–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ: {invoice["result"]["pay_url"]}')
        print(invoice)
        invoice_id = str(invoice['result']['invoice_id'])
        user = (str(callback.message.chat.id), 0.0)
        cur.execute(
            """CREATE TABLE IF NOT EXISTS users(userid TEXT UNIQUE,balance REAL);""")  # create columns
        conn.commit()  # saving
        cur.execute("INSERT OR IGNORE INTO users VALUES (?,  ?);", user)  # add user
        conn.commit()  # saving
        invoice_p = invoice
    invoice_info = []


@bot.message_handler(content_types=['text'])
def paying(message):
    global invoice_info, invoice_id, Crypto
    if float(message.text) >= 0.1:
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('USDT', callback_data='USDT')
        btn2 = types.InlineKeyboardButton('TON', callback_data='TON')
        btn3 = types.InlineKeyboardButton('BTC', callback_data='BTC')
        btn4 = types.InlineKeyboardButton('ETH', callback_data='ETH')
        btn5 = types.InlineKeyboardButton('BNB', callback_data='BNB')
        markup.row(btn1)
        markup.row(btn2)
        markup.row(btn3)
        markup.row(btn4)
        markup.row(btn5)
        invoice_info.append(message.text)
        bot.send_message(message.chat.id, text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É', reply_markup=markup)



scheduler.add_job(callback_inline, "interval", seconds=5)
scheduler.start()


bot.infinity_polling()
